#!/bin/bash

command="affinity"
tag="---"$(date)
clean=0
bin="affinity_example"

extract() {
    echo $(echo $1 | cut -d'=' -f 2)
}

for var in "$@"
do
    case "$var" in
        --clean) clean=1 ;;
        --command=*) command=$(extract $var) ;;
        --bin=*) bin=$(extract $var) ;;
        --tag=*)
            tmp=$(extract $var)
            tag="---["$(date)"]: ${tmp} " ;;
        *) ;;
    esac    
done

tag="${tag}: ${bin}---"

profiles=(
    sockets_close
    sockets_spread
    cores_close
    cores_spread
)

tag_file() {
    echo echo "---${tag}[" $(date) "]---" >> $1
}

run_stats() {
    root=$1
    profile=$2
    path=$root/$profile

    cat $path/base | paste -sd, > "${path}/squashed"
    #tag_file "${path}/amm"
    cat "${path}/squashed" | python3 post.py >> "${path}/amm"
}

run_mat_stats() {
    root=$1
    cat "${root}/accum" | python3 calc_speedup.py >> "${root}/speedups"
}

mat_mul_part_2_run() {
    root=$1
    sched_policy=$2
    chunk_sz=$3
    
    export OMP_DISPLAY_ENV=true
    export OMP_SCHEDULE="${sched_policy}, ${chunk_sz}"
    export OMP_NUM_THREADS=12

    echo $OMP_SCHEDULE

    f="${root}/${sched_policy}-${chunk_sz}"
    
    mkdir -p "${f}"
       
    output=$(bin/mat_mul 1000 2>"${f}/omp_info")

    echo $output >> "${f}/base"
    echo $output " # ${sched_policy}-${chunk_sz}" >> "${root}/accum"

    if [ $? -ne 0 ]; then
        echo "encountered error"
        exit 1
    fi
}

mat_mul_part_2() {
    root=out/mat_mul

    if [ $clean -eq 1 ]; then
        rm -rf $root
    fi
    
    mkdir -p $root

    export OMP_DISPLAY_ENV=true
    
    echo "[" >> "${root}/accum"

    mat_mul_part_2_run $root 'STATIC' '10'
    mat_mul_part_2_run $root 'STATIC' '100'
    mat_mul_part_2_run $root 'STATIC' '1000'

    mat_mul_part_2_run $root 'DYNAMIC' '10'
    mat_mul_part_2_run $root 'DYNAMIC' '100'
    mat_mul_part_2_run $root 'DYNAMIC' '1000'
    
    echo "]" >> "${root}/accum"
    
    #run_mat_stats $root    
}

mat_mul() {
    root=out/mat_mul

    if [ $clean -eq 1 ]; then
        rm -rf $root
    fi
    
    mkdir -p $root

    export OMP_DISPLAY_ENV=true
    export OMP_SCHEDULE='STATIC, 100'

    echo "[" >> "${root}/accum"
    
    for i in {1..12}
    do

        export OMP_PLACES=cores
        export OMP_PROC_BIND=spread
        export OMP_NUM_THREADS=$i
        

        f="${root}/${i}_threads"
        
        mkdir -p "${f}"
        echo $i >> "${f}/base"
    
        #for j in {1..1}
        #do
        echo "$i threads"
        output=$(bin/mat_mul 1000 2>"${f}/omp_info")

        echo $output >> "${f}/base"
        echo $output >> "${root}/accum"

        if [ $? -ne 0 ]; then
            echo "encountered error"
            exit 1
        fi
    done

    echo "]" >> "${root}/accum"
    
    run_mat_stats $root
}

affinity() {
    root=out/affinity

    if [ $clean -eq 1 ]; then
        rm -rf $root
    fi
    
    mkdir -p $root

    ginput="./${root}:"
    profiles_len="${#profiles[@]}"
    profiles_index=0
    
    for i in "${profiles[@]}"; do
        source env.sh $i

        mkdir -p $root/$i
        echo $i >> $root/$i/base

        for j in {1..5}
        do
            echo "exec $j"
     #       tag_file $root/$i/base
            bin/affinity_example2 10000000 100 >> $root/$i/base 2>$root/$i/omp_info       
        done
        
        run_stats $root $i

        ginput="${ginput}${i}"

        if (( profiles_index < profiles_len - 1 )); then
            ginput="${ginput}|"
        fi
        
        (( profiles_index++ ))
    done

#    echo $ginput | python3 graph.py
}

case "$command" in
    "")       affinity ;;
    affinity) affinity ;;
    mat_mul)  mat_mul ;;
    mat_mul_2) mat_mul_part_2 ;;
    *) ;;
esac


    
